package {    import flash.display.Sprite;    import flash.events.*;    import flash.net.*	import flash.display.MovieClip;	import flash.display.Stage;	import flash.display.LoaderInfo;	import flash.text.*	import flash.filters.DropShadowFilter;	import flash.external.ExternalInterface;		public class uploader extends MovieClip {				var fileRef:FileReference;		var button:MovieClip; 		var container:Sprite;		var bar:MovieClip;		var bar2:MovieClip;		var tx_filename:TextField;		var tx_percent:TextField;		var mystage:Stage;		var TF:TextFormat;		var sessionID:String;		var taskID:String;				public function uploader() {						// get Variables from url			var keyStr:String;			var valueStr:String;			var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;						sessionID = String(paramObj['sessionID']);			taskID = String(paramObj['taskID']);									var error:TextField = new TextField();			error.autoSize = TextFieldAutoSize.LEFT;										if (sessionID == 'undefined'){				error.text = 'parameter sessionID missing';				addChild(error);								return;			}						if((taskID == 'undefined')) {				error.text = 'parameter taskID missing';				addChild(error);								return;			}									TF = new TextFormat();			TF.font = "Tahoma";			TF.color = '0x000066';			TF.size = 12;						container = new Sprite();						// startbutton			button = new button_select();			button.x = 3;			button.y = 5;			button.filters = [new DropShadowFilter(1, 90, 0, 1, 4.0, 4.0, 1.0)];			container.addChild(button);						// filename textbox			tx_filename = new TextField();			with(tx_filename) {				x = 20;				y = 2;				width = 225;				height = 18;				defaultTextFormat = TF;				antiAliasType = AntiAliasType.ADVANCED;				text = 'add file';			}			container.addChild(tx_filename);						// percent textbopx			tx_percent = new TextField();			with(tx_percent) {				x = 255;				y = 6;				width = 50;				height = 18;				textAlign = 'right';				defaultTextFormat = TF;				antiAliasType = AntiAliasType.ADVANCED; 				visible = false;			}			tx_percent.defaultTextFormat = TF;			container.addChild(tx_percent);						bar = new item_bar();			bar2 = new item_bar();						bar.x = 30;			bar.y = 23;			bar.height = 2;			bar.visible = false;			container.addChild(bar);						bar2.x = 30;			bar2.y = 23;			bar2.height = 2;			bar2.alpha = 20;			bar2.visible = false;			container.addChild(bar2);						button.buttonMode = true;			button.useHandCursor = true;						var imageTypes:FileFilter = new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg; *.jpeg; *.gif; *.png");			var textTypes:FileFilter = new FileFilter("Text Files (*.txt, *.rtf)", "*.txt; *.rtf");			//var allTypes:Array = new Array(imageTypes, textTypes);						fileRef = new FileReference();			configureListeners(fileRef);									button.addEventListener(MouseEvent.CLICK, function () {				try				{				   var success:Boolean = fileRef.browse();				}				catch (error:Error)				{					trace("Unable to browse for files."+error);				}			});						stage.addChild(container);		}								function configureListeners(dispatcher:IEventDispatcher):void {			dispatcher.addEventListener(Event.CANCEL, cancelHandler);			dispatcher.addEventListener(Event.COMPLETE, completeHandler);			dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			dispatcher.addEventListener(Event.OPEN, openHandler);			dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);			dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			dispatcher.addEventListener(Event.SELECT, selectHandler);		}			function cancelHandler(event:Event):void {			trace("cancelHandler: " + event);		}			function ioErrorHandler(event:IOErrorEvent):void {			var foo:TextField = new TextField();			foo.defaultTextFormat = TF;			foo.text = "ioErrorHandler: " + event;			addChild(foo);		}			 function securityErrorHandler(event:SecurityErrorEvent):void {			trace("securityErrorHandler: " + event);			var foo:TextField = new TextField();			foo.text = "securityErrorHandler: " + event;			addChild(foo);		}				function openHandler(event:Event) {					}				function selectHandler(event:Event):void {			var host:String =  this.loaderInfo.loaderURL.substr(0, this.loaderInfo.loaderURL.lastIndexOf("/"));			var params:URLVariables = new URLVariables();				params.PHPSESSID = this.sessionID;				params.taskID = taskID;			tx_filename.text = host;						var request:URLRequest = new URLRequest(host+"/upload.php");				request.method = URLRequestMethod.POST;				request.data = params;						try {				fileRef.upload(request);				var file:FileReference = FileReference(event.target);				tx_filename.text = 'uploading '+file.name;				tx_filename.setTextFormat(TF);								bar.visible = true;				bar.scaleX = 0.02;				bar2.visible = true;				tx_percent.text = '1%';				tx_percent.visible = true;				tx_percent.setTextFormat(TF);			}			catch (error:Error)			{				trace("Unable to upload file.");			}		}				function progressHandler(event:ProgressEvent):void {			var percent =  Math.round((100 / event.bytesTotal) * event.bytesLoaded);			bar.scaleX = percent/100;			bar.alpha = 100;			tx_percent.text = percent+"%";			tx_percent.setTextFormat(TF);		}				function completeHandler(event:Event):void		{			tx_percent.visible = false;			tx_filename.text = 'add file';			tx_filename.setTextFormat(TF);			bar2.visible = false;			bar.visible = false;			var result:uint = ExternalInterface.call("BC.broadcastMessage", String('_uploadFinished'),String(taskID));		}	}}